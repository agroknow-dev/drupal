<?php
/**
 * Implements hook_menu().
 *
 * The paths are parsed from 'routes.json' file.
 * Note that the menu hooks are cached in the Drupal database.
 */
function landportal_uris_menu() {
	// Read the file and decode it into an associative array.
	$routes = file_get_contents(drupal_get_path('module', 'landportal_uris').'/routes.json');
	$routes = json_decode($routes, true);

	$items = array();
	foreach ($routes['routes'] as $route) {
		$item = array();
		$item['title'] = $route['title'];
		$num_params = count($route['params']);
		// The page callback depends on the number of parameters that are passed
		// to the path. For example: a path with 1 parameter will call route_callback_1.
		$item['page callback'] = '_route_callback_' . $num_params;
		// The first parameter will always be the name of the path. 
		// This parameter
		// is not counted to assign the callback.
		$params = array(
			$route['name'],
		);
		foreach ($route['params'] as $param) {
			array_push($params, $param);
		}
		$item['page arguments'] = $params;
		// Allows the path to be accessed for all users.
		$item['access callback'] = TRUE;
		$items[$route['path']] = $item;
	}
	return $items;
}

/**
 * Implements hook_theme().
 */
/*
function landportal_uris_theme() {
	return array(
		'book' => array(
			'variables' => array('mustache_data' => NULL, 'mustache_template' => NULL),
			'template' => 'custom',
			'path' => drupal_get_path('theme', 'book'),
		),
        '404' => array(
            'variables' => array(),
            'template' => '404',
            'path' => drupal_get_path('theme', 'book'),
        ),
	);
}
*/

/*
 * The function callback for each route will be automatically resolved depending
 * on the number of parameters declared in the 'routes.json' file.
 * For example with 1 parameter the function callback will be _route_callback_1.
 */
function _route_callback_0($name) {
	$m_template = $name;
	$model = _get_model($name);
	$m_data = $model->get();
	$m_data['application'] = _get_application_data($name);
	return theme('book', array('mustache_template' => $m_template, 'mustache_data' => $m_data));
}

function _route_callback_1($name, $param1) {
	$m_template = $name;
	$model = _get_model($name);
	$m_data = $model->get($param1);
    if ($m_data === false) {
	   return theme('404', array());
    } else {
		$m_data['application'] = _get_application_data($name);
        return theme('book', array('mustache_template' => $m_template, 'mustache_data' => $m_data));
    }
}

/*
 * This function returns the corresponding model from a custom path_name.
 * The module must be named the same as the path_name but with the first letter
 * capitalized. For example, for the name 'countries' the model will be 'Countries'
 */
function _get_model($name) {
	include drupal_get_path('module', 'landportal_uris') . '/model/' . $name . '.php';
	$r = new ReflectionClass(ucfirst($name)); // First letter uppercase
	return $r->newInstanceArgs();
}

/**
 * This function returns the required application data used in the views.
 * This application data contains the available languages and the current
 * user name.
 */
function _get_application_data($name) {
	$appdata = array();
	$appdata['languages'] = _get_available_languages();
	$user = _get_current_user();
	if (!is_null($user))
		$appdata['user'] = $user;
	return $appdata;
}

/**
 * Returns an associative array containing the available languages and its
 * name.
 */
function _get_available_languages() {
	$result = array();
	$lang_folder = drupal_get_path('theme', 'book') . '/lang/';
	$files = new DirectoryIterator($lang_folder);
	foreach ($files as $file) {
		// Exclude '.' and '..' files
		if ($file->isFile()) {
			// Filename without extension
			$filename = $file->getBasename('.' . $file->getExtension());
			$filecontent = json_decode(file_get_contents($file->getPathname()), true);
			$result[$filename] = $filecontent['language-name'];
		}
	}
	return $result;
}

/**
 * Returns an associative array containing the current user name.
 * If there is no user, returns NULL
 */
function _get_current_user() {
	//global $user;
	if (!isset($user->name)) {
		return NULL;
	} else {
		return array('name' => $user->name);
	}
}

